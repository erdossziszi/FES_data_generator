StudentsNr = 10;
InstructorsNr = 8;
DaysNr = 1;
SlotsPerDay = 20;
AvailabilitySlotsLenght = 20;
RoomNr = 2;
ProgrammNr = 1;
DegreeNr = 2;
RolesNr = 0;
CoursesNr = 0;
InstructorsProgramm = [{1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}];
InstructorRolesPerProgramm = array2d(1..ProgrammNr,{},[]);
InstructorsAvailability = [|1, |1, |0, |1, |0, |0, |1, |0|];
StudentsProgramm = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
StudentsDegree = [2, 1, 1, 2, 2, 2, 1, 1, 1, 2];
StudentsSupervisorId = [6, 7, 3, 4, 7, 3, 7, 5, 3, 7];
StudentsCourseIds = [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}];
StudentsAvailability = [|0, |0, |0, |1, |1, |1, |0, |1, |1, |0|];
TheoryticalMinCard = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
CoursesInstructorIds = [];
RolesDemands = [];
RolesContinuity = [];
ExamLen = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
LunchTsMinLen = 1;
LunchStarts = [5..12];
SupervisorAvailable = 0;
OptimalLunchLenght = [2, 1];
OptimalStartTs = [1, 0];
OptimalFinishTs = [1, 20];
MinimizeRooms = 300;
RolesSoftContinuity = array2d(1..2,{},[]);
SameDegreeInRoom = 10;
Mergeability = 0;
