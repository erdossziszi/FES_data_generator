StudentsNr = 10;
InstructorsNr = 4;
DaysNr = 1;
SlotsPerDay = 60;
AvailabilitySlotsLenght = 60;
RoomNr = 2;
ProgrammNr = 1;
DegreeNr = 2;
RolesNr = 0;
CoursesNr = 5;
InstructorsProgramm = [{1}, {1}, {1}, {1}];
InstructorRolesPerProgramm = array2d(1..ProgrammNr,{},[]);
InstructorsAvailability = [|1, |0, |1, |0|];
StudentsProgramm = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
StudentsDegree = [1, 2, 1, 1, 1, 1, 1, 1, 1, 1];
StudentsSupervisorId = [3, 3, 2, 2, 4, 2, 2, 2, 4, 4];
StudentsCourseIds = [{2, 3, 5}, {1, 2, 3, 4, 5}, {1, 4, 5}, {1, 3, 5}, {1, 3, 5}, {3, 4, 5}, {1, 4, 5}, {2, 3, 4}, {2, 3, 4}, {1, 4, 5}];
StudentsAvailability = [|1, |1, |0, |1, |1, |1, |0, |0, |1, |1|];
TheoryticalMinCard = [3, 5, 3, 4, 3, 3, 3, 3, 3, 3];
CoursesInstructorIds = [{3}, {2, 3}, {4}, {2}, {4}];
RolesDemands = [];
RolesContinuity = [];
ExamLen = [2, 1, 2, 2, 2, 2, 2, 2, 2, 2];
LunchTsMinLen = 0;
LunchStarts = [16..45];
SupervisorAvailable = 5;
OptimalLunchLenght = [0, 0];
OptimalStartTs = [0, 0];
OptimalFinishTs = [1, 60];
MinimizeRooms = 100;
RolesSoftContinuity = array2d(1..2,{},[]);
SameDegreeInRoom = 0;
Mergeability = 0;
